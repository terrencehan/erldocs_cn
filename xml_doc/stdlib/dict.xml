<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1996</year><year>2011</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      The contents of this file are subject to the Erlang Public License,
      Version 1.1, (the "License"); you may not use this file except in
      compliance with the License. You should have received a copy of the
      Erlang Public License along with this software. If not, it can be
      retrieved online at http://www.erlang.org/.
    
      Software distributed under the License is distributed on an "AS IS"
      basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
      the License for the specific language governing rights and limitations
      under the License.
    
    </legalnotice>

    <title>dict</title>
    <prepared>Robert Virding</prepared>
    <docno></docno>
    <date>1997-01-15</date>
    <rev>B</rev>
  </header>
  <module>dict</module>
  <modulesummary>Key-Value Dictionary</modulesummary>
  <description>
    <p><c>Dict</c> implements a <c>Key</c> - <c>Value</c> dictionary.
      The representation of a dictionary is not defined.</p>
    <p>This module provides exactly the same interface as the module
      <c>orddict</c>. One difference is that while this module
      considers two keys as different if they do not match (<c>=:=</c>),
      <c>orddict</c> considers two keys as different if and only if
      they do not compare equal (<c>==</c>).</p>
  </description>

  <datatypes>
    <datatype>
      <name><marker id="type-dict">dict()</marker></name>
      <desc><p>Dictionary as returned by <c>new/0</c>.</p></desc>
    </datatype>
  </datatypes>
  <funcs>
    <func>
      <name name="append" arity="3"/>
      <fsummary>Append a value to keys in a dictionary</fsummary>
      <desc>
        <p>This function appends a new <c><anno>Value</anno></c> to the current list
          of values associated with <c><anno>Key</anno></c>.</p>
        <p_zh>追加一个新<c><anno>Value</anno></c>到字典中与<c><anno>Key</anno></c>关联的列表.(译注：如果字典中不存在Key，那么创建一个与Key关联的空列表后进行追加操作，如果已存在Key但是与之关联的不是列表（不能进行++操作）则产生异常.)</p_zh>
      </desc>
    </func>
    <func>
      <name name="append_list" arity="3"/>
      <fsummary>Append new values to keys in a dictionary</fsummary>
      <desc>
        <p>This function appends a list of values <c><anno>ValList</anno></c> to
          the current list of values associated with <c><anno>Key</anno></c>. An
          exception is generated if the initial value associated with
          <c><anno>Key</anno></c> is not a list of values.</p>
        <p_zh>将一个存放值的列表<c><anno>ValList</anno></c>追加到字典中与<c><anno>Key</anno></c>关联的列表, 
            如果与<c><anno>Key</anno></c>关联的(即<c><anno>ValList</anno></c>或者字典中与Key关联的)不是值的列表，则产生异常.(译注：请注意与dict:append/1的区别)</p_zh>
      </desc>
    </func>
    <func>
      <name name="erase" arity="2"/>
      <fsummary>Erase a key from a dictionary</fsummary>
      <desc>
        <p>This function erases all items with a given key from a
          dictionary.</p>
        <p_zh>删除字典中与Key关联的所有项.</p_zh>
      </desc>
    </func>
    <func>
      <name name="fetch" arity="2"/>
      <fsummary>Look-up values in a dictionary</fsummary>
      <desc>
        <p>This function returns the value associated with <c><anno>Key</anno></c>
          in the dictionary <c><anno>Dict</anno></c>. <c>fetch</c> assumes that
          the <c><anno>Key</anno></c> is present in the dictionary and an exception
          is generated if <c><anno>Key</anno></c> is not in the dictionary.</p>
        <p_zh>返回字典<c><anno>Dict</anno></c>中与<c><anno>Key</anno></c>关联的值 . <c>fetch</c> 假设在字典中存在<c><anno>Key</anno></c>, 如果假设不成立则产生一个异常。 </p_zh>
      </desc>
    </func>
    <func>
      <name name="fetch_keys" arity="1"/>
      <fsummary>Return all keys in a dictionary</fsummary>
      <desc>
        <p>This function returns a list of all keys in the dictionary.</p>
        <p_zh>以列表的形式返回字典中所有的键值.</p_zh>
      </desc>
    </func>
    <func>
      <name name="filter" arity="2"/>
      <fsummary>Choose elements which satisfy a predicate</fsummary>
      <desc>
        <p><c><anno>Dict2</anno></c> is a dictionary of all keys and values in
          <c><anno>Dict1</anno></c> for which <c><anno>Pred</anno>(<anno>Key</anno>, <anno>Value</anno>)</c> is <c>true</c>.</p>
        <p_zh> <c><anno>Dict1</anno></c> 中所有使<c><anno>Pred</anno>(<anno>Key</anno>, <anno>Value</anno>)</c> 返回 <c>true</c>的键值对构成了字典<c><anno>Dict2</anno></c>.</p_zh>
      </desc>
    </func>
    <func>
      <name name="find" arity="2"/>
      <fsummary>Search for a key in a dictionary</fsummary>
      <desc>
        <p>This function searches for a key in a dictionary. Returns
          <c>{ok, <anno>Value</anno>}</c> where <c><anno>Value</anno></c> is the value associated
          with <c><anno>Key</anno></c>, or <c>error</c> if the key is not present in
          the dictionary.</p>
        <p_zh>在字典中搜索一个键. 返回<c>{ok, <anno>Value</anno>}</c>, 其中的
           <c><anno>Value</anno></c>与 <c><anno>Key</anno></c>关联, 或者当字典中没有搜索的键时, 返回 <c>error</c> .</p_zh>
      </desc>
    </func>
    <func>
      <name name="fold" arity="3"/>
      <fsummary>Fold a function over a dictionary</fsummary>
      <desc>
        <p>Calls <c><anno>Fun</anno></c> on successive keys and values of
          <c><anno>Dict</anno></c> together with an extra argument <c>Acc</c>
          (short for accumulator). <c><anno>Fun</anno></c> must return a new
          accumulator which is passed to the next call. <c><anno>Acc0</anno></c> is
          returned if the list is empty. The evaluation order is
          undefined.</p>
        <p_zh>
           以一个额外的参数<c>Acc</c>(accumulator的缩写)对<c><anno>Dict</anno></c>中连续的键值对调用<c><anno>Fun</anno></c>
          . <c><anno>Fun</anno></c> 必须返回一个传递给下次调用的累加器. 如果列表为空返回<c><anno>Acc0</anno></c> .计算顺序是未定义的.</p_zh>
      </desc>
    </func>
    <func>
      <name name="from_list" arity="1"/>
      <fsummary>Convert a list of pairs to a dictionary</fsummary>
      <desc>
        <p>This function converts the <c><anno>Key</anno></c> - <c><anno>Value</anno></c> list
          <c><anno>List</anno></c> to a dictionary.</p>
        <p_zh>将<c><anno>Key</anno></c> - <c><anno>Value</anno></c> 列表
          <c><anno>List</anno></c> 转换成一个字典.</p_zh>
      </desc>
    </func>
    <func>
      <name name="is_key" arity="2"/>
      <fsummary>Test if a key is in a dictionary</fsummary>
      <desc>
        <p>This function tests if <c><anno>Key</anno></c> is contained in
          the dictionary <c><anno>Dict</anno></c>.</p>
        <p_zh>测试<c><anno>Key</anno></c> 是否包含在<c><anno>Dict</anno></c>里.</p_zh>
      </desc>
    </func>
    <func>
      <name name="map" arity="2"/>
      <fsummary>Map a function over a dictionary</fsummary>
      <desc>
        <p><c>map</c> calls <c><anno>Fun</anno></c> on successive keys and values
          of <c><anno>Dict1</anno></c> to return a new value for each key.
          The evaluation order is undefined.</p>
        <p_zh><c>map</c>对<c><anno>Dict1</anno></c>中连续的键值调用<c><anno>Fun</anno></c>来为每个键返回一个新值.  计算顺序是未定义的.</p_zh>
      </desc>
    </func>
    <func>
      <name name="merge" arity="3"/>
      <fsummary>Merge two dictionaries</fsummary>
      <desc>
        <p><c>merge</c> merges two dictionaries, <c><anno>Dict1</anno></c> and
          <c><anno>Dict2</anno></c>, to create a new dictionary.  All the <c><anno>Key</anno></c>
          - <c><anno>Value</anno></c> pairs from both dictionaries are included in
          the new dictionary.  If a key occurs in both dictionaries then
          <c><anno>Fun</anno></c> is called with the key and both values to return a
          new value. <c>merge</c> could be defined as:</p>
        <code type="none">
merge(Fun, D1, D2) ->
    fold(fun (K, V1, D) ->
                 update(K, fun (V2) -> Fun(K, V1, V2) end, V1, D)
         end, D2, D1).</code>
        <p>but is faster.</p>
      </desc>
    </func>
    <func>
      <name name="new" arity="0"/>
      <fsummary>Create a dictionary</fsummary>
      <desc>
        <p>This function creates a new dictionary.</p>
        <p_zh>创建一个新的字典.</p_zh>
      </desc>
    </func>
    <func>
      <name name="size" arity="1"/>
      <fsummary>Return the number of elements in a dictionary</fsummary>
      <desc>
        <p>Returns the number of elements in a <c><anno>Dict</anno></c>.</p>
        <p_zh>返回<c><anno>Dict</anno></c>中的元素个数.</p_zh>
      </desc>
    </func>
    <func>
      <name name="store" arity="3"/>
      <fsummary>Store a value in a dictionary</fsummary>
      <desc>
        <p>This function stores a <c><anno>Key</anno></c> - <c><anno>Value</anno></c> pair in a
          dictionary. If the <c><anno>Key</anno></c> already exists in <c><anno>Dict1</anno></c>,
          the associated value is replaced by <c><anno>Value</anno></c>.</p>
        <p_zh>将键值对<c><anno>Key</anno></c> - <c><anno>Value</anno></c> 存入一个字典. 如果在<c><anno>Dict1</anno></c>中已存在<c><anno>Key</anno></c>, 那么原关联值将会被<c><anno>Value</anno></c>替代.</p_zh>
      </desc>
    </func>
    <func>
      <name name="to_list" arity="1"/>
      <fsummary>Convert a dictionary to a list of pairs</fsummary>
      <desc>
        <p>This function converts the dictionary to a list
          representation.</p>
        <p_zh>将字典转换成列表形式.</p_zh>
      </desc>
    </func>
    <func>
      <name name="update" arity="3"/>
      <fsummary>Update a value in a dictionary</fsummary>
      <desc>
        <p>Update a value in a dictionary by calling <c><anno>Fun</anno></c> on
          the value to get a new value.  An exception is generated if
          <c><anno>Key</anno></c> is not present in the dictionary.</p>
        <p_zh>通过调用<c><anno>Fun</anno></c>更新字典中的一个值.  如果字典中没有
          <c><anno>Key</anno></c> 则产生一个异常.</p_zh>
      </desc>
    </func>
    <func>
      <name name="update" arity="4"/>
      <fsummary>Update a value in a dictionary</fsummary>
      <desc>
        <p>Update a value in a dictionary by calling <c><anno>Fun</anno></c> on
          the value to get a new value.  If <c><anno>Key</anno></c> is not present
          in the dictionary then <c><anno>Initial</anno></c> will be stored as
          the first value. For example <c>append/3</c> could be defined
          as:</p>
        <p_zh>通过调用<c><anno>Fun</anno></c>更新字典中的一个值. 如果字典中没有<c><anno>Key</anno></c> 那么<c><anno>Initial</anno></c> 将被存储成第一个值. 例如<c>append/3</c> 可以定义为:</p_zh>
        <code type="none">
append(Key, Val, D) ->
    update(Key, fun (Old) -> Old ++ [Val] end, [Val], D).</code>
      </desc>
    </func>
    <func>
      <name name="update_counter" arity="3"/>
      <fsummary>Increment a value in a dictionary</fsummary>
      <desc>
        <p>Add <c><anno>Increment</anno></c> to the value associated with <c><anno>Key</anno></c>
          and store this value.  If <c><anno>Key</anno></c> is not present in
          the dictionary then <c><anno>Increment</anno></c> will be stored as
          the first value.</p>
        <p_zh>对与<c><anno>Key</anno></c>关联的值加<c><anno>Increment</anno></c>并储存新值.  如果字典中没有<c><anno>Key</anno></c> 那么 <c><anno>Increment</anno></c> 将会存成一个个值.</p_zh>
        <p>This could be defined as:</p>
        <p_zh>该函数可定义成:</p_zh>
        <code type="none">
update_counter(Key, Incr, D) ->
    update(Key, fun (Old) -> Old + Incr end, Incr, D).</code>
        <p>but is faster.</p>
      </desc>
    </func>
  </funcs>

  <section>
    <title>Notes</title>
    <p>The functions <c>append</c> and <c>append_list</c> are included
      so we can store keyed values in a list <em>accumulator</em>. For
      example:</p>
    <pre>
> D0 = dict:new(),
  D1 = dict:store(files, [], D0),
  D2 = dict:append(files, f1, D1),
  D3 = dict:append(files, f2, D2),
  D4 = dict:append(files, f3, D3),
  dict:fetch(files, D4).
[f1,f2,f3]    </pre>
    <p>This saves the trouble of first fetching a keyed value,
      appending a new value to the list of stored values, and storing
      the result.
      </p>
    <p>The function <c>fetch</c> should be used if the key is known to
      be in the dictionary, otherwise <c>find</c>.</p>
  </section>

  <section>
    <title>See Also</title>
    <p><seealso marker="gb_trees">gb_trees(3)</seealso>, 
      <seealso marker="orddict">orddict(3)</seealso></p>
  </section>
</erlref>

