<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1997</year><year>2011</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      The contents of this file are subject to the Erlang Public License,
      Version 1.1, (the "License"); you may not use this file except in
      compliance with the License. You should have received a copy of the
      Erlang Public License along with this software. If not, it can be
      retrieved online at http://www.erlang.org/.
    
      Software distributed under the License is distributed on an "AS IS"
      basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
      the License for the specific language governing rights and limitations
      under the License.
    
    </legalnotice>

    <title>filename</title>
    <prepared>Kenneth Lundin</prepared>
    <docno>1</docno>
    <date>97-11-13</date>
    <rev>B</rev>
  </header>
  <module>filename</module>
  <modulesummary>Filename Manipulation Functions</modulesummary>
  <description>
    <p>The module <c>filename</c> provides a number of useful functions
      for analyzing and manipulating file names. These functions are
      designed so that the Erlang code can work on many different
      platforms with different formats for file names. With file name
      is meant all strings that can be used to denote a file. They can
      be short relative names like <c>foo.erl</c>, very long absolute
      name which include a drive designator and directory names like
      <c>D:\usr/local\bin\erl/lib\tools\foo.erl</c>, or any variations
      in between.</p>
    <p_zh><c>filename</c>模块提供了一系有用的分析和管理文件名的函数.设计这些函数是为了让Erlang编写的代码在各种文件名格式不同的平台上 正常工作.文件名字面值可以用来代表文件.它们可以是像<c>foo.erl</c> 一样简短的相对路径文件名，或是像<c>D:\usr/local\bin\erl/lib\tools\foo.erl</c> 这样长的绝对路径文件名，或者是其他介于两者之间的形式.</p_zh>
    <p>In Windows, all functions return file names with forward slashes
      only, even if the arguments contain back slashes. Use
      <c>join/1</c> to normalize a file name by removing redundant
      directory separators.</p>
    <p_zh>在Windows操作系统上, 即便参数带有反斜杠，所有函数都只返回带有斜杠的文件名. 使用<c>join/1</c>来规格化文件名，可以避免自己指定文件夹分隔符.</p_zh>
    <p>The module supports raw file names in the way that if a binary is present, or the file name cannot be interpreted according to the return value of 
    <seealso marker="kernel:file#native_name_encoding/0">file:native_name_encoding/0</seealso>, a raw file name will also be returned. For example filename:join/1 provided with a path component being a binary (and also not being possible to interpret under the current native file name encoding) will result in a raw file name being returned (the join operation will have been performed of course). For more information about raw file names, see the <seealso marker="kernel:file">file</seealso> module.</p>
    <p_zh>The module supports raw file names in the way that if a binary is present, or the file name cannot be interpreted according to the return value of 
    <seealso marker="kernel:file#native_name_encoding/0">file:native_name_encoding/0</seealso>, a raw file name will also be returned. For example filename:join/1 provided with a path component being a binary (and also not being possible to interpret under the current native file name encoding) will result in a raw file name being returned (the join operation will have been performed of course). For more information about raw file names, see the <seealso marker="kernel:file">file</seealso> module.</p_zh>
  </description>

  <funcs>
    <func>
      <name name="absname" arity="1"/>
      <fsummary>Convert a filename to an absolute name, relative the working directory</fsummary>
      <desc>
        <p>Converts a relative <c><anno>Filename</anno></c> and returns an absolute
          name. No attempt is made to create the shortest absolute name,
          because this can give incorrect results on file systems which
          allow links.</p>
        <p_zh>把相对路径<c><anno>Filename</anno></c>转换成绝对路径. [TODO]不要企图创建最简绝对路径，在支持链接的系统上也样可能会给出错误结果.</p_zh>
        <p>Unix examples:</p>
        <p_zh>Unix 示例:</p_zh>
        <pre>
1> <input>pwd().</input>
"/usr/local"
2> <input>filename:absname("foo").</input>
"/usr/local/foo"
3> <input>filename:absname("../x").</input>
"/usr/local/../x"
4> <input>filename:absname("/").</input>
"/"</pre>
        <p>Windows examples:</p>
        <p_zh>Windows 示例:</p_zh>
        <pre>
1> <input>pwd().</input>
"D:/usr/local"
2> <input>filename:absname("foo").</input>
"D:/usr/local/foo"
3> <input>filename:absname("../x").</input>
"D:/usr/local/../x"
4> <input>filename:absname("/").</input>
"D:/"</pre>
      </desc>
    </func>
    <func>
      <name name="absname" arity="2"/>
      <fsummary>Convert a filename to an absolute name, relative a specified directory</fsummary>
      <desc>
        <p>This function works like <c>absname/1</c>, except that
          the directory to which the file name should be made relative
          is given explicitly in the <c><anno>Dir</anno></c> argument.</p>
        <p_zh>除了与文件名相关的文件夹在参数<c><anno>Dir</anno></c>中显式给出, 该函数与<c>absname/1</c>相似.</p_zh>
      </desc>
    </func>
    <func>
      <name name="absname_join" arity="2"/>
      <fsummary>Join an absolute directory with a relative filename</fsummary>
      <desc>
        <p>Joins an absolute directory with a relative filename.
          Similar to <c>join/2</c>, but on platforms with tight
          restrictions on raw filename length and no support for
          symbolic links (read: VxWorks), leading parent directory
          components in <c><anno>Filename</anno></c> are matched against trailing
          directory components in <c><anno>Dir</anno></c> so they can be removed
          from the result - minimizing its length.</p>
        <p_zh>连接一个绝对路径文件夹和相对路径文件名.
          与<c>join/2</c>相似, 但是在严格限制原始文件长度以及不支持符号链接的平台上 (read: VxWorks), 导致<c><anno>Filename</anno></c>中的父文件夹组件 are matched against trailing
          directory components in <c><anno>Dir</anno></c> so they can be从结果中删除 - 以最小化它的长度minimizing its length.</p_zh>
      </desc>
    </func>
    <func>
      <name name="basename" arity="1"/>
      <fsummary>Return the last component of a filename</fsummary>
      <desc>
        <p>Returns the last component of <c><anno>Filename</anno></c>, or
          <c><anno>Filename</anno></c> itself if it does not contain any directory
          separators.</p>
        <p_zh>返回<c><anno>Filename</anno></c>的最后组成部分, 或者当<c><anno>Filename</anno></c>不包含文件夹分隔符时返回<c><anno>Filename</anno></c>自身>.</p_zh>
        <pre>
5> <input>filename:basename("foo").</input>
"foo"
6> <input>filename:basename("/usr/foo").</input>
"foo"
7> <input>filename:basename("/").</input>
[]</pre>
      </desc>
    </func>
    <func>
      <name name="basename" arity="2"/>
      <fsummary>Return the last component of a filename, stripped of the specified extension</fsummary>
      <desc>
        <p>Returns the last component of <c><anno>Filename</anno></c> with the
          extension <c><anno>Ext</anno></c> stripped. This function should be used
          to remove a specific extension which might, or might not, be
          there. Use <c>rootname(basename(Filename))</c> to remove an
          extension that exists, but you are not sure which one it is.</p>
        <p_zh>返回去除了扩展名<c><anno>Ext</anno></c>后<c><anno>Filename</anno></c>的最后组成部分. 这个函数被用于去除特定的有或没有的后缀名. 使用<c>rootname(basename(Filename))</c>可以删除你不知道的后缀.</p_zh>
        <pre>
8> <input>filename:basename("~/src/kalle.erl", ".erl").</input>
"kalle"
9> <input>filename:basename("~/src/kalle.beam", ".erl").</input>
"kalle.beam"
10> <input>filename:basename("~/src/kalle.old.erl", ".erl").</input>
"kalle.old"
11> <input>filename:rootname(filename:basename("~/src/kalle.erl")).</input>
"kalle"
12> <input>filename:rootname(filename:basename("~/src/kalle.beam")).</input>
"kalle"</pre>
      </desc>
    </func>
    <func>
      <name name="dirname" arity="1"/>
      <fsummary>Return the directory part of a path name</fsummary>
      <desc>
        <p>Returns the directory part of <c><anno>Filename</anno></c>.</p>
        <p_zh>返回<c><anno>Filename</anno></c>的文件夹部分.</p_zh>
        <pre>
13> <input>filename:dirname("/usr/src/kalle.erl").</input>
"/usr/src"
14> <input>filename:dirname("kalle.erl").</input>
"."

5> <input>filename:dirname("\\usr\\src/kalle.erl").</input> % Windows
"/usr/src"</pre>
      </desc>
    </func>
    <func>
      <name name="extension" arity="1"/>
      <fsummary>Return the file extension</fsummary>
      <desc>
        <p>Returns the file extension of <c><anno>Filename</anno></c>, including
          the period. Returns an empty string if there is no extension.</p>
        <p_zh>返回<c><anno>Filename</anno></c>的后缀名（包括点号). 如果没有后缀名返回空字符串.</p_zh>
        <pre>
15> <input>filename:extension("foo.erl").</input>
".erl"
16> <input>filename:extension("beam.src/kalle").</input>
[]</pre>
      </desc>
    </func>
    <func>
      <name name="flatten" arity="1"/>
      <fsummary>Convert a filename to a flat string</fsummary>
      <desc>
        <p>Converts a possibly deep list filename consisting of
          characters and atoms into the corresponding flat string
          filename.</p>
        <p_zh>将包含原子和字符的深层列表转换成相应平整化的字符串文件名.</p_zh>
      </desc>
    </func>
    <func>
      <name name="join" arity="1"/>
      <fsummary>Join a list of filename components with directory separators</fsummary>
      <desc>
        <p>Joins a list of file name <c><anno>Components</anno></c> with directory
          separators. If one of the elements of <c><anno>Components</anno></c>
          includes an absolute path, for example <c>"/xxx"</c>,
          the preceding elements, if any, are removed from the result.</p>
      <p_zh>使用文件夹分隔符连接文件名列表<c><anno>Components</anno></c>. 如果<c><anno>Components</anno></c>的其中一个元素包含绝对路径名, 例如"/xxx", 那么之前的元素将会从结果中删除.</p_zh>
        <p>The result is "normalized":</p>
        <p_zh>结果是"规格化的":</p_zh>
        <list type="bulleted">
          <item>Redundant directory separators are removed.</item>
          <item_zh>多余的文件夹分隔符将被删除.</item_zh>
          <item>In Windows, all directory separators are forward
           slashes and the drive letter is in lower case.</item>
          <item_zh>在Windows平台上, 所有的文件夹分隔符是斜线并且盘符为小写.</item_zh>
        </list>
        <pre>
17> <input>filename:join(["/usr", "local", "bin"]).</input>
"/usr/local/bin"
18> <input>filename:join(["a/b///c/"]).</input>
"a/b/c"

6> <input>filename:join(["B:a\\b///c/"]).</input> % Windows
"b:a/b/c"</pre>
      </desc>
    </func>
    <func>
      <name name="join" arity="2"/>
      <fsummary>Join two filename components with directory separators</fsummary>
      <desc>
        <p>Joins two file name components with directory separators. 
          Equivalent to <c>join([<anno>Name1</anno>, <anno>Name2</anno>])</c>.</p>
        <p_zh>使用文件夹分隔符链接两个文件名组件.
          等同于<c>join([<anno>Name1</anno>, <anno>Name2</anno>])</c>.</p_zh>
      </desc>
    </func>
    <func>
      <name name="nativename" arity="1"/>
      <fsummary>Return the native form of a file path</fsummary>
      <desc>
        <p>Converts <c><anno>Path</anno></c> to a form accepted by the command shell
          and native applications on the current platform. On Windows,
          forward slashes is converted to backward slashes. On all
          platforms, the name is normalized as done by <c>join/1</c>.</p>
        <p_zh>将 <c><anno>Path</anno></c>转换成命令行和当前平台本地程序可接受的形式. 
          在Windows平台上斜线会被转换成反斜线. 在所有平台上, 文件名都像使用<c>join/1</c>似的被规格化.</p_zh>
        <pre>
19> <input>filename:nativename("/usr/local/bin/").</input> % Unix
"/usr/local/bin"

7> <input>filename:nativename("/usr/local/bin/").</input> % Windows
"\\usr\\local\\bin"</pre>
      </desc>
    </func>
    <func>
      <name name="pathtype" arity="1"/>
      <fsummary>Return the type of a path</fsummary>
      <desc>
        <p>Returns the type of path, one of <c>absolute</c>,
          <c>relative</c>, or <c>volumerelative</c>.</p>
        <p_zh>返回路径类型, <c>absolute</c>,
          <c>relative</c>, 或 <c>volumerelative</c>中其一.</p_zh>
        <taglist>
          <tag><c>absolute</c></tag>
          <item>
            <p>The path name refers to a specific file on a specific
              volume.</p>
            <p_zh>路径指向特定卷上的特定文件.</p_zh>
            <p>Unix example: <c>/usr/local/bin</c></p>
            <p_zh>Unix 示例: <c>/usr/local/bin</c></p_zh>
            <p>Windows example: <c>D:/usr/local/bin</c></p>
            <p_zh>Windows 示例: <c>D:/usr/local/bin</c></p_zh>
          </item>
          <tag><c>relative</c></tag>
          <item>
            <p>The path name is relative to the current working
              directory on the current volume.</p>
            <p_zh>路径名相对于当前卷上的当前工作目录.</p_zh>
            <p>Example: <c>foo/bar, ../src</c></p>
            <p_zh>示例: <c>foo/bar, ../src</c></p_zh>
          </item>
          <tag><c>volumerelative</c></tag>
          <item>
            <p>The path name is relative to the current working
              directory on a specified volume, or it is a specific file
              on the current working volume.</p>
            <p_zh>路径名相对于特定卷上的当前目录, 或者它是当前工作卷上的特定文件.</p_zh>
            <p>Windows example: <c>D:bar.erl, /bar/foo.erl</c></p>
            <p_zh>Windows 示例: <c>D:bar.erl, /bar/foo.erl</c></p_zh>
          </item>
        </taglist>
      </desc>
    </func>
    <func>
      <name name="rootname" arity="1"/>
      <name name="rootname" arity="2"/>
      <fsummary>Remove a filename extension</fsummary>
      <desc>
        <p>Remove a filename extension. <c>rootname/2</c> works as
          <c>rootname/1</c>, except that the extension is removed only
          if it is <c><anno>Ext</anno></c>.</p>
        <p_zh>删除文件名中的扩展名. <c>rootname/2</c> 除了只删除特定的后缀名<c><anno>Ext</anno></c>以外和<c>rootname/1</c>效果一样 .</p_zh>
        <pre>
20> <input>filename:rootname("/beam.src/kalle").</input>
/beam.src/kalle"
21> <input>filename:rootname("/beam.src/foo.erl").</input>
"/beam.src/foo"
22> <input>filename:rootname("/beam.src/foo.erl", ".erl").</input>
"/beam.src/foo"
23> <input>filename:rootname("/beam.src/foo.beam", ".erl").</input>
"/beam.src/foo.beam"</pre>
      </desc>
    </func>
    <func>
      <name name="split" arity="1"/>
      <fsummary>Split a filename into its path components</fsummary>
      <desc>
        <p>Returns a list whose elements are the path components of
          <c><anno>Filename</anno></c>.</p>
        <p_zh>返回由<c><anno>Filename</anno></c>路径组件构成的列表.</p_zh>
        <pre>
24> <input>filename:split("/usr/local/bin").</input>
["/","usr","local","bin"]
25> <input>filename:split("foo/bar").</input>
["foo","bar"]
26> <input>filename:split("a:\\msdev\\include").</input>
["a:/","msdev","include"]</pre>
      </desc>
    </func>
    <func>
      <name name="find_src" arity="1"/>
      <name name="find_src" arity="2"/>
      <fsummary>Find the filename and compiler options for a module</fsummary>
      <desc>
        <p>Finds the source filename and compiler options for a module.
          The result can be fed to <c>compile:file/2</c> in order to
          compile the file again.</p>
        <p_zh>为模块搜索源文件名和编译选项.结果可以传递给<c>compile:file/2</c>来重新编译文件.</p_zh>

	<warning><p>We don't recommend using this function. If possible,
	use <seealso marker="beam_lib">beam_lib(3)</seealso> to extract
	the abstract code format from the BEAM file and compile that
    instead.</p> <p_zh>我们不建议使用这个函数. 如果可能的话,
	使用 <seealso marker="beam_lib">beam_lib(3)</seealso> 从BEAN文件中提取抽象代码并且编译.</p_zh></warning>

        <p>The <c><anno>Beam</anno></c> argument, which can be a string or an atom,
          specifies either the module name or the path to the source
          code, with or without the <c>".erl"</c> extension. In either
          case, the module must be known by the code server, i.e.
          <c>code:which(<anno>Module</anno>)</c> must succeed.</p>
        <p_zh>参数<c><anno>Beam</anno></c>(字符串或者原子) 指定模块名或源代码路径
          code, with or without the <c>".erl"</c> extension. In either
          case, the module must be known by the code server, i.e.
          <c>code:which(<anno>Module</anno>)</c> must succeed.</p_zh>
        <p><c><anno>Rules</anno></c> describes how the source directory can be found,
          when the object code directory is known. It is a list of
          tuples <c>{<anno>BinSuffix</anno>, <anno>SourceSuffix</anno>}</c> and is interpreted
          as follows: If the end of the directory name where the object
          is located matches <c><anno>BinSuffix</anno></c>, then the source code
          directory has the same name, but with <c><anno>BinSuffix</anno></c>
          replaced by <c><anno>SourceSuffix</anno></c>. <c><anno>Rules</anno></c> defaults to:</p>
        <code type="none">
[{"", ""}, {"ebin", "src"}, {"ebin", "esrc"}]</code>
        <p>If the source file is found in the resulting directory, then
          the function returns that location together with
          <c><anno>Options</anno></c>. Otherwise, the next rule is tried, and so on.</p>

        <p>The function returns <c>{<anno>SourceFile</anno>, <anno>Options</anno>}</c> if it succeeds.
          <c><anno>SourceFile</anno></c> is the absolute path to the source file
          without the <c>".erl"</c> extension. <c><anno>Options</anno></c> include
          the options which are necessary to recompile the file with
          <c>compile:file/2</c>, but excludes options such as
          <c>report</c> or <c>verbose</c> which do not change the way
          code is generated. The paths in the <c>{outdir, <anno>Path</anno>}</c>
          and <c>{i, Path}</c> options are guaranteed to be
          absolute.</p>

      </desc>
    </func>
  </funcs>
</erlref>

