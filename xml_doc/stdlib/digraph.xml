<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1996</year><year>2011</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      The contents of this file are subject to the Erlang Public License,
      Version 1.1, (the "License"); you may not use this file except in
      compliance with the License. You should have received a copy of the
      Erlang Public License along with this software. If not, it can be
      retrieved online at http://www.erlang.org/.
    
      Software distributed under the License is distributed on an "AS IS"
      basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
      the License for the specific language governing rights and limitations
      under the License.
    
    </legalnotice>

    <title>digraph</title>
    <prepared>Tony</prepared>
    <responsible>Bjarne D&auml;cker</responsible>
    <docno>1</docno>
    <approved>Bjarne D&auml;cker</approved>
    <checked></checked>
    <date>2001-08-27</date>
    <rev>C</rev>
    <file>digraph.sgml</file>
  </header>
  <module>digraph</module>
  <modulesummary>Directed Graphs</modulesummary>
  <description>
    <p>The <c>digraph</c> module implements a version of labeled
      directed graphs. What makes the graphs implemented here
      non-proper directed graphs is that multiple edges between
      vertices are allowed. However, the customary definition of
      directed graphs will be used in the text that follows.
      </p>
    <p_zh><c>digraph</c>模块实现了一个有标签的有向图. 允许顶点之间有多条边使这里实现的图为不完全有向图. 然而, the customary definition of directed graphs will be used in the text that follows.
      </p_zh>
    <p>A <marker id="digraph"></marker><em>directed graph</em> (or just
      "digraph") is a pair (V,&nbsp;E) of a finite set V of 
      <marker id="vertex"></marker><em>vertices</em> and a finite set E of
      <marker id="edge"></marker><em>directed edges</em> (or just "edges"). 
      The set of
      edges E is a subset of V&nbsp;&times;&nbsp;V (the Cartesian
      product of V with itself). In this module, V is allowed to be
      empty; the so obtained unique digraph is called the 
      <marker id="empty_digraph"></marker><em>empty digraph</em>. 
      Both vertices and edges are represented by unique Erlang terms.
      </p>
    <p_zh> <marker id="digraph"></marker><em>有向图</em> (或称为"图")是一个由<marker id="vertex"></marker><em>顶点</em>的有限集合V 和<marker id="edge"></marker><em>有向边</em> (或称为"边")的有限集合E构成的(V,&nbsp;E)对. 
      边集合E 是V&nbsp;&times;&nbsp;V (V和它自身的笛卡尔积)的一个子集. 在这个模块中, V 允许为空; 所以获得的唯一有向图称为
      <marker id="empty_digraph"></marker><em>空有向图</em>. 
      顶点和边都是由唯一的Erlang项表示.
      </p_zh>
    <p>Digraphs can be annotated with additional information. Such
      information may be attached to the vertices and to the edges of
      the digraph. A digraph which has been annotated is called a
      <em>labeled digraph</em>, and the information attached to a
      vertex or an edge is called a <marker id="label"></marker>
      <em>label</em>. Labels are Erlang terms.
      </p>
    <p_zh>有向图可以通过额外的信息来注释. 这样的信息可以加到顶点或者边上. 注释过的图称为<em>标记有向图</em>, 附加到顶点或者边的信息称为<marker id="label"></marker> <em>标记</em>. 标记是Erlang项.
      </p_zh>
    <p>An edge e&nbsp;=&nbsp;(v,&nbsp;w) is said to 
      <marker id="emanate"></marker><em>emanate</em> from vertex v and 
      to be <marker id="incident"></marker><em>incident</em> on vertex w. 
      The <marker id="out_degree"></marker><em>out-degree</em> of a vertex 
      is the number of edges emanating from that vertex. 
      The <marker id="in_degree"></marker><em>in-degree</em> of a vertex 
      is the number of edges incident on that vertex. 
      If there is an edge emanating from v and incident on w, then w is 
      said to be an <marker id="out_neighbour"></marker>
      <em>out-neighbour</em> of v, and v is said to be an 
      <marker id="in_neighbour"></marker><em>in-neighbour</em> of w. 
      A <marker id="path"></marker><em>path</em> P from v[1] to v[k] 
      in a digraph (V,&nbsp;E) is a non-empty sequence
      v[1],&nbsp;v[2],&nbsp;...,&nbsp;v[k] of vertices in V such that
      there is an edge (v[i],v[i+1]) in E for
      1&nbsp;&lt;=&nbsp;i&nbsp;&lt;&nbsp;k. 
      The <marker id="length"></marker><em>length</em> of the path P is k-1. 
      P is <marker id="simple_path"></marker><em>simple</em> if all 
      vertices are distinct, except that the first and the last vertices
      may be the same. 
      P is a <marker id="cycle"></marker><em>cycle</em> if the length 
      of P is not zero and v[1] = v[k]. 
      A <marker id="loop"></marker><em>loop</em> is a cycle of length one. 
      A <marker id="simple_cycle"></marker><em>simple cycle</em> is a path
      that is both a cycle and simple. 
      An <marker id="acyclic_digraph"></marker><em>acyclic digraph</em>
      is a digraph that has no cycles.
      </p>
      <p_zh>e&nbsp;=&nbsp;(v,&nbsp;w) 表示从顶点v<marker id="emanate"></marker><em>发出</em> <marker id="incident"></marker><em>传入</em>到顶点w的边.  <marker id="out_degree"></marker><em>出度</em> 表示从某顶点发出的边的数量. <marker id="in_degree"></marker><em>入度</em>表示传入到某个顶点的边的数量. 如果有一条边从v发出传入到w, 那么就说w是v的一个<marker id="out_neighbour"></marker> <em>外邻点</em>, v是w的一个<marker id="in_neighbour"></marker><em>内邻点</em>. 图(V,&nbsp;E)上的一条从v[1]到v[k]的<marker id="path"></marker><em>路径</em>是一个顶点集合V中的非空序列v[1],&nbsp;v[2],&nbsp;...,&nbsp;v[k] , 其中对于1&nbsp;&lt;=&nbsp;i&nbsp;&lt;&nbsp;k存在一条属于集合E的边(v[i],v[i+1]). 
      路径P的<marker id="length"></marker><em>长度</em>为k-1. 
      除了第一个和最后一个顶点可能相同外，其他顶点都不同的路径称为<marker id="simple_path"></marker><em>简单的</em> 
      如果P的长度不为零且v[1] = v[k]则称P为一个<marker id="cycle"></marker><em>环</em>.
      <marker id="loop"></marker><em>自环</em> 是一个长度为一的环. 
      一个既是简单的又是环的路径称为<marker id="simple_cycle"></marker><em>简单环</em>. 
      没有环的图称为<marker id="acyclic_digraph"></marker><em>无环图</em>.
      </p_zh>
  </description>
  <datatypes>
    <datatype>
      <name name="d_type"/>
    </datatype>
    <datatype>
      <name name="d_cyclicity"/>
    </datatype>
    <datatype>
      <name name="d_protection"/>
    </datatype>
    <datatype>
      <name><marker id="type-digraph">digraph()</marker></name>
      <desc><p>A digraph as returned by <c>new/0,1</c>.</p>
      <p_zh>一个由<c>new/0,1</c>返回的图.</p_zh></desc>
    </datatype>
    <datatype>
      <name><marker id="type-edge">edge()</marker></name>
    </datatype>
    <datatype>
      <name name="label"/>
    </datatype>
    <datatype>
      <name><marker id="type-vertex">vertex()</marker></name>
    </datatype>
  </datatypes>
  <funcs>
    <func>
      <name name="add_edge" arity="3"/>
      <name name="add_edge" arity="4"/>
      <name name="add_edge" arity="5"/>
      <fsummary>Add an edge to a digraph.</fsummary>
      <type name="add_edge_err_rsn"/>
      <desc>
        <p><c>add_edge/5</c> creates (or modifies) the edge <c><anno>E</anno></c>
          of the digraph <c><anno>G</anno></c>, using <c><anno>Label</anno></c> as the (new)
          <seealso marker="#label">label</seealso> of the edge. The
          edge is <seealso marker="#emanate">emanating</seealso> from
          <c><anno>V1</anno></c> and <seealso marker="#incident">incident</seealso>
          on <c><anno>V2</anno></c>. Returns <c><anno>E</anno></c>.
          </p>
        <p_zh><c>add_edge/5</c> 使用<c><anno>Label</anno></c>作为(新) <seealso marker="#label">标签</seealso> 创建(或修改)图 <c><anno>G</anno></c>的边<c><anno>E</anno></c>. 这条边从<c><anno>V1</anno></c><seealso marker="#emanate">发出</seealso> 并且 <seealso marker="#incident">传入</seealso> 到 <c><anno>V2</anno></c>. 返回<c><anno>E</anno></c>.  </p_zh>
        <p><c>add_edge(<anno>G</anno>,&nbsp;<anno>V1</anno>,&nbsp;<anno>V2</anno>,&nbsp;<anno>Label</anno>)</c> is
          equivalent to
          <c>add_edge(<anno>G</anno>,&nbsp;<anno>E</anno>,&nbsp;<anno>V1</anno>,&nbsp;<anno>V2</anno>,&nbsp;<anno>Label</anno>)</c>,
          where <c><anno>E</anno></c> is a created edge. The created edge is
          represented by the term <c>['$e'&nbsp;|&nbsp;N]</c>, where N
          is an integer&nbsp;&gt;=&nbsp;0.
          </p>
        <p_zh><c>add_edge(<anno>G</anno>,&nbsp;<anno>V1</anno>,&nbsp;<anno>V2</anno>,&nbsp;<anno>Label</anno>)</c> 等同于
          <c>add_edge(<anno>G</anno>,&nbsp;<anno>E</anno>,&nbsp;<anno>V1</anno>,&nbsp;<anno>V2</anno>,&nbsp;<anno>Label</anno>)</c>,
          where <c><anno>E</anno></c> is a created edge. 创建的边由项<c>['$e'&nbsp;|&nbsp;N]</c>代表, 其中N是大于等于0的整数.
          </p_zh>
        <p><c>add_edge(<anno>G</anno>,&nbsp;<anno>V1</anno>,&nbsp;<anno>V2</anno>)</c> is equivalent to
          <c>add_edge(<anno>G</anno>,&nbsp;<anno>V1</anno>,&nbsp;<anno>V2</anno>,&nbsp;[])</c>.
          </p>
        <p_zh><c>add_edge(<anno>G</anno>,&nbsp;<anno>V1</anno>,&nbsp;<anno>V2</anno>)</c> 等同于<c>add_edge(<anno>G</anno>,&nbsp;<anno>V1</anno>,&nbsp;<anno>V2</anno>,&nbsp;[])</c>.
          </p_zh>
        <p>If the edge would create a cycle in 
	  an <seealso marker="#acyclic_digraph">acyclic digraph</seealso>,
	  then <c>{error,&nbsp;{bad_edge,&nbsp;<anno>Path</anno>}}</c> is returned. If
          either of <c><anno>V1</anno></c> or <c><anno>V2</anno></c> is not a vertex of the
          digraph <c><anno>G</anno></c>, then
          <c>{error,&nbsp;{bad_vertex,&nbsp;</c><anno>V</anno><c>}}</c> is
          returned, <anno>V</anno>&nbsp;=&nbsp;<c><anno>V1</anno></c> or
          <anno>V</anno>&nbsp;=&nbsp;<c><anno>V2</anno></c>.
          </p>
        <p_zh>如果要边在一个<seealso marker="#acyclic_digraph">无环图</seealso>中产生环, 那么返回<c>{error,&nbsp;{bad_edge,&nbsp;<anno>Path</anno>}}</c>. 如果<c><anno>V1</anno></c> 或 <c><anno>V2</anno></c>不是<c><anno>G</anno></c>的顶点, 则返回<c>{error,&nbsp;{bad_vertex,&nbsp;</c><anno>V</anno><c>}}</c>, <anno>V</anno>&nbsp;=&nbsp;<c><anno>V1</anno></c> 或 <anno>V</anno>&nbsp;=&nbsp;<c><anno>V2</anno></c>.
          </p_zh>
      </desc>
    </func>
    <func>
      <name name="add_vertex" arity="1"/>
      <name name="add_vertex" arity="2"/>
      <name name="add_vertex" arity="3"/>
      <fsummary>Add or modify a vertex of a digraph.</fsummary>
      <desc>
        <p><c>add_vertex/3</c> creates (or modifies) the vertex <c><anno>V</anno></c>
          of the digraph <c><anno>G</anno></c>, using <c><anno>Label</anno></c> as the (new)
          <seealso marker="#label">label</seealso> of the
          vertex. Returns <c><anno>V</anno></c>.
          </p>
        <p_zh><c>add_vertex/3</c> 创建(或修改)图<c><anno>G</anno></c>的顶点<c><anno>V</anno></c> , using <c><anno>Label</anno></c> as the (new)
          <seealso marker="#label">label</seealso> of the
          vertex. Returns <c><anno>V</anno></c>.
          </p_zh>
        <p><c>add_vertex(<anno>G</anno>,&nbsp;<anno>V</anno>)</c> is equivalent to
          <c>add_vertex(<anno>G</anno>,&nbsp;<anno>V</anno>,&nbsp;[])</c>.
          </p>
        <p_zh><c>add_vertex(<anno>G</anno>,&nbsp;<anno>V</anno>)</c> 等同于<c>add_vertex(<anno>G</anno>,&nbsp;<anno>V</anno>,&nbsp;[])</c>.
          </p_zh>
        <p><c>add_vertex/1</c> creates a vertex using the empty list
          as label, and returns the created vertex. The created vertex
          is represented by the term <c>['$v'&nbsp;|&nbsp;N]</c>,
          where N is an integer&nbsp;&gt;=&nbsp;0.
          </p>
        <p_zh><c>add_vertex/1</c> 使用空列表作为标签创建一个顶点, 并且返回创建好的顶点. 新顶点由项<c>['$v'&nbsp;|&nbsp;N]</c>表示, 其中N是一个大于等于零的整数.
          </p_zh>
      </desc>
    </func>
    <func>
      <name name="del_edge" arity="2"/>
      <fsummary>Delete an edge from a digraph.</fsummary>
      <desc>
        <p>Deletes the edge <c><anno>E</anno></c> from the digraph <c><anno>G</anno></c>.
          </p>
        <p_zh>从图<c><anno>G</anno>中删除边</c><c><anno>E</anno></c>.
          </p_zh>
      </desc>
    </func>
    <func>
      <name name="del_edges" arity="2"/>
      <fsummary>Delete edges from a digraph.</fsummary>
      <desc>
        <p>Deletes the edges in the list <c><anno>Edges</anno></c> from the digraph
          <c><anno>G</anno></c>.
          </p>
        <p_zh>从图<c><anno>G</anno></c>中删除列表<c><anno>Edges</anno></c>从的边 .
          </p_zh>
      </desc>
    </func>
    <func>
      <name name="del_path" arity="3"/>
      <fsummary>Delete paths from a digraph.</fsummary>
      <desc>
        <p>Deletes edges from the digraph <c><anno>G</anno></c> until there are no
          <seealso marker="#path">paths</seealso> from the vertex
          <c><anno>V1</anno></c> to the vertex <c><anno>V2</anno></c>.
          </p>
        <p_zh>从图<c><anno>G</anno></c>中删除边直到从顶点<c><anno>V1</anno></c>到顶点<c><anno>V2</anno></c>不再有<seealso marker="#path">路径</seealso> .  </p_zh>
        <p>A sketch of the procedure employed: Find an arbitrary
          <seealso marker="#simple_path">simple path</seealso>
          v[1],&nbsp;v[2],&nbsp;...,&nbsp;v[k] from <c><anno>V1</anno></c> to
          <c><anno>V2</anno></c> in <c><anno>G</anno></c>. Remove all edges of
	  <c><anno>G</anno></c> <seealso marker="#emanate">emanating</seealso> from v[i]
	  and <seealso marker="#incident">incident</seealso> to v[i+1] for
          1&nbsp;&lt;=&nbsp;i&nbsp;&lt;&nbsp;k (including multiple
          edges). Repeat until there is no path between <c><anno>V1</anno></c> and
          <c><anno>V2</anno></c>.
          </p>
      </desc>
    </func>
    <func>
      <name name="del_vertex" arity="2"/>
      <fsummary>Delete a vertex from a digraph.</fsummary>
      <desc>
        <p>Deletes the vertex <c><anno>V</anno></c> from the digraph <c><anno>G</anno></c>. Any
          edges <seealso marker="#emanate">emanating</seealso> from
          <c><anno>V</anno></c> or <seealso marker="#incident">incident</seealso>
          on <c><anno>V</anno></c> are also deleted.
          </p>
        <p_zh>从图<c><anno>G</anno></c>中删除顶点<c><anno>V</anno></c>. 任何从<c><anno>V</anno></c><seealso marker="#emanate">发出</seealso>并<seealso marker="#incident">传入</seealso> 到 <c><anno>V</anno></c> 的边也被删除.
          </p_zh>
      </desc>
    </func>
    <func>
      <name name="del_vertices" arity="2"/>
      <fsummary>Delete vertices from a digraph.</fsummary>
      <desc>
        <p>Deletes the vertices in the list <c><anno>Vertices</anno></c> from the
          digraph <c><anno>G</anno></c>.
          </p>
        <p_zh>从图<c><anno>G</anno></c>中删除列表<c><anno>Vertices</anno></c>里的顶点.  </p_zh>
      </desc>
    </func>
    <func>
      <name name="delete" arity="1"/>
      <fsummary>Delete a digraph.</fsummary>
      <desc>
        <p>Deletes the digraph <c><anno>G</anno></c>. This call is important
          because digraphs are implemented with <c>ETS</c>. There is
          no garbage collection of <c>ETS</c> tables. The digraph
          will, however, be deleted if the process that created the
          digraph terminates.
          </p>
        <p_zh>删除图<c><anno>G</anno></c>. 这个调用很重要，因为图是通过<c>ETS</c>实现的. 没有针对<c>ETS</c>表的垃圾回收. 然而，如果创建图的进程终止，那么图也自然被删除. </p_zh>
      </desc>
    </func>
    <func>
      <name name="edge" arity="2"/>
      <fsummary>Return the vertices and the label of an edge  of a digraph.</fsummary>
      <desc>
        <p>Returns <c>{<anno>E</anno>,&nbsp;<anno>V1</anno>,&nbsp;<anno>V2</anno>,&nbsp;<anno>Label</anno>}</c> where
          <c><anno>Label</anno></c> is the <seealso marker="#label">label</seealso>
          of the edge 
	  <c><anno>E</anno></c> <seealso marker="#emanate">emanating</seealso> from
	  <c><anno>V1</anno></c> and <seealso marker="#incident">incident</seealso> on
	  <c><anno>V2</anno></c> of the digraph <c><anno>G</anno></c>.
	  If there is no edge <c><anno>E</anno></c> of the
          digraph <c><anno>G</anno></c>, then <c>false</c> is returned.
          </p>
        <p_zh>返回<c>{<anno>E</anno>,&nbsp;<anno>V1</anno>,&nbsp;<anno>V2</anno>,&nbsp;<anno>Label</anno>}</c> 其中 <c><anno>Label</anno></c> 是图<c><anno>G</anno></c>中从 <c><anno>V1</anno></c><seealso marker="#emanate">发出</seealso>并且<seealso marker="#incident">传入</seealso> 到 <c><anno>V2</anno></c>的边<c><anno>E</anno></c>的<seealso marker="#label">标签</seealso>. 如果图<c><anno>G</anno></c>中没有边<c><anno>E</anno></c>, 那么返回 <c>false</c>.
          </p_zh>
      </desc>
    </func>
    <func>
      <name name="edges" arity="1"/>
      <fsummary>Return all edges of a digraph.</fsummary>
      <desc>
        <p>Returns a list of all edges of the digraph <c><anno>G</anno></c>, in
          some unspecified order.
          </p>
        <p_zh>以一个列表的形式返回图<c><anno>G</anno></c>的所有边.(列表元素顺序未指定)
          </p_zh>
      </desc>
    </func>
    <func>
      <name name="edges" arity="2"/>
      <fsummary>Return the edges emanating from or incident on  a vertex of a digraph.</fsummary>
      <desc>
        <p>Returns a list of all 
	edges <seealso marker="#emanate">emanating</seealso> from 
	or <seealso marker="#incident">incident</seealso> on <c><anno>V</anno></c>
	of the digraph <c><anno>G</anno></c>, in some unspecified order.</p>
        <p_zh>以一个列表的形式返回图<c><anno>G</anno></c>顶点<c><anno>V</anno></c>上所有<seealso marker="#emanate">发出</seealso> 和<seealso marker="#incident">传入</seealso>的边.(列表元素顺序未指定).</p_zh>
      </desc>
    </func>
    <func>
      <name name="get_cycle" arity="2"/>
      <fsummary>Find one cycle in a digraph.</fsummary>
      <desc>
        <p>If there is 
	  a <seealso marker="#simple_cycle">simple cycle</seealso> of 
	  length two or more through the vertex
          <c><anno>V</anno></c>, then the cycle is returned as a list
          <c>[<anno>V</anno>,&nbsp;...,&nbsp;<anno>V</anno>]</c> of vertices, otherwise if there
          is a <seealso marker="#loop">loop</seealso> through
          <c><anno>V</anno></c>, then the loop is returned as a list <c>[<anno>V</anno>]</c>. If
          there are no cycles through <c><anno>V</anno></c>, then <c>false</c> is
          returned.
          </p>
        <p_zh>如果有一个长度大于等于2的<seealso marker="#simple_cycle">简单环</seealso>通过顶点<c><anno>V</anno></c>, 那么环以一个顶点的列表<c>[<anno>V</anno>,&nbsp;...,&nbsp;<anno>V</anno>]</c>返回, 否则如果有一个<seealso marker="#loop">自环</seealso> 通过 <c><anno>V</anno></c>, 那么自环以一个列表<c>[<anno>V</anno>]</c>返回. 如果没有环通过<c><anno>V</anno></c>, 则返回<c>false</c>.
          </p_zh>
        <p><c>get_path/3</c> is used for finding a simple cycle
          through <c><anno>V</anno></c>.
          </p>
        <p_zh><c>get_path/3</c> 用于寻找一个通过<c><anno>V</anno>的简单环</c>.
          </p_zh>
      </desc>
    </func>
    <func>
      <name name="get_path" arity="3"/>
      <fsummary>Find one path in a digraph.</fsummary>
      <desc>
        <p>Tries to find 
	  a <seealso marker="#simple_path">simple path</seealso> from 
	  the vertex <c><anno>V1</anno></c> to the vertex
          <c><anno>V2</anno></c> of the digraph <c><anno>G</anno></c>. Returns the path as a
          list <c>[<anno>V1</anno>,&nbsp;...,&nbsp;<anno>V2</anno>]</c> of vertices, or
          <c>false</c> if no simple path from <c><anno>V1</anno></c> to <c><anno>V2</anno></c>
          of length one or more exists.
          </p>
        <p_zh>在图<c><anno>G</anno></c>中尝试寻找一个从顶点<c><anno>V1</anno></c> 到顶点<c><anno>V2</anno></c>的<seealso marker="#simple_path">简单路径</seealso>. 以一个顶点列表<c>[<anno>V1</anno>,&nbsp;...,&nbsp;<anno>V2</anno>]</c>的形式返回路径, 或者如果没有从<c><anno>V1</anno></c> 到 <c><anno>V2</anno></c>长度大于等于1的简单路径则返回<c>false</c>.
          </p_zh>
        <p>The digraph <c><anno>G</anno></c> is traversed in a depth-first manner,
          and the first path found is returned.
          </p>
        <p_zh>以深度优先的方式遍历图<c><anno>G</anno></c>, 并且返回找到的第一条路径.
          </p_zh>
      </desc>
    </func>
    <func>
      <name name="get_short_cycle" arity="2"/>
      <fsummary>Find one short cycle in a digraph.</fsummary>
      <desc>
        <p>Tries to find an as short as 
	  possible <seealso marker="#simple_cycle">simple cycle</seealso> through
	  the vertex <c><anno>V</anno></c> of the digraph <c>G</c>. Returns the cycle
          as a list <c>[<anno>V</anno>,&nbsp;...,&nbsp;<anno>V</anno>]</c> of vertices, or
          <c>false</c> if no simple cycle through <c><anno>V</anno></c> exists.
          Note that a <seealso marker="#loop">loop</seealso> through
          <c><anno>V</anno></c> is returned as the list <c>[<anno>V</anno>,&nbsp;<anno>V</anno>]</c>.
          </p>
          <p_zh>在图<c><anno>G</anno></c>中尝试寻找一个通过<c><anno>V</anno></c>且尽可能短的<seealso marker="#simple_cycle">简单环</seealso>. 以一个顶点列表<c>[<anno>V1</anno>,&nbsp;...,&nbsp;<anno>V2</anno>]</c>的形式返回路径, 或者如果没有从<c><anno>V1</anno></c> 到 <c><anno>V2</anno></c>长度大于等于1的简单路径则返回<c>false</c>.
           注意，一个通过<c><anno>V</anno></c>的<seealso marker="#loop">自环</seealso> 以列表<c>[<anno>V</anno>,&nbsp;<anno>V</anno>]</c>的形式返回.
          </p_zh>
        <p><c>get_short_path/3</c> is used for finding a simple cycle
          through <c><anno>V</anno></c>.
          </p>
        <p_zh><c>get_short_path/3</c>用以寻找一个通过<c><anno>V</anno></c>的简单环.
          </p_zh>
      </desc>
    </func>
    <func>
      <name name="get_short_path" arity="3"/>
      <fsummary>Find one short path in a digraph.</fsummary>
      <desc>
        <p>Tries to find an as short as 
	  possible <seealso marker="#simple_path">simple path</seealso> from
	  the vertex <c><anno>V1</anno></c> to the vertex <c><anno>V2</anno></c> of the digraph <c><anno>G</anno></c>.
          Returns the path as a list <c>[<anno>V1</anno>,&nbsp;...,&nbsp;<anno>V2</anno>]</c> of
          vertices, or <c>false</c> if no simple path from <c><anno>V1</anno></c>
          to <c><anno>V2</anno></c> of length one or more exists.
          </p>
        <p_zh>在图<c><anno>G</anno></c>中尝试寻找一个从顶点<c><anno>V1</anno></c> 到顶点<c><anno>V2</anno></c>尽可能短的<seealso marker="#simple_path">简单路径</seealso>. 以一个顶点列表<c>[<anno>V1</anno>,&nbsp;...,&nbsp;<anno>V2</anno>]</c>的形式返回路径, 或者如果没有从<c><anno>V1</anno></c> 到 <c><anno>V2</anno></c>长度大于等于1的简单路径则返回<c>false</c>.
          </p_zh>
        <p>The digraph <c><anno>G</anno></c> is traversed in a breadth-first
          manner, and the first path found is returned.
          </p>
        <p_zh>以广度优先的方式遍历图<c><anno>G</anno></c>, 并且返回找到的第一条路径.
          </p_zh>
      </desc>
    </func>
    <func>
      <name name="in_degree" arity="2"/>
      <fsummary>Return the in-degree of a vertex of a digraph.</fsummary>
      <desc>
        <p>Returns the <seealso marker="#in_degree">in-degree</seealso> of the vertex
          <c><anno>V</anno></c> of the digraph <c><anno>G</anno></c>.
          </p>
        <p_zh>返回图<c><anno>G</anno></c>中顶点<c><anno>V</anno></c>的<seealso marker="#in_degree">入度</seealso>.  </p_zh>
      </desc>
    </func>
    <func>
      <name name="in_edges" arity="2"/>
      <fsummary>Return all edges incident on a vertex of  a digraph.</fsummary>
      <desc>
        <p>Returns a list of all 
	  edges <seealso marker="#incident">incident</seealso> on
	  <c><anno>V</anno></c> of the digraph <c><anno>G</anno></c>, in some unspecified order.
          </p>
        <p_zh>以列表的形式, 返回在图<c><anno>G</anno></c>中顶点<c><anno>V</anno></c>的所有<seealso marker="#in_degree">入度</seealso>.(列表中元素顺序未指定)  </p_zh>
      </desc>
    </func>
    <func>
      <name name="in_neighbours" arity="2"/>
      <fsummary>Return all in-neighbours of a vertex of  a digraph.</fsummary>
      <desc>
        <p>Returns a list of 
	  all <seealso marker="#in_neighbour">in-neighbours</seealso> of 
	  <c><anno>V</anno></c> of the digraph <c><anno>G</anno></c>, in some unspecified order.
          </p>
        <p_zh>以列表的形式,返回在图<c><anno>G</anno></c>中顶点<c><anno>V</anno></c>的所有<seealso marker="#in_neighbour">内邻点</seealso>.(列表元素顺序未指定).
          </p_zh>
      </desc>
    </func>
    <func>
      <name name="info" arity="1"/>
      <fsummary>Return information about a digraph.</fsummary>
      <type name="d_cyclicity"/>
      <type name="d_protection"/>
      <desc>
        <p>Returns a list of <c>{Tag, Value}</c> pairs describing the
          digraph <c><anno>G</anno></c>. The following pairs are returned:
          </p>
        <p_zh>返回一个<c>{Tag, Value}</c>对的列表来描述图<c><anno>G</anno></c>. 返回下列对: </p_zh>
        <list type="bulleted">
          <item>
            <p><c>{cyclicity, <anno>Cyclicity</anno>}</c>, where <c><anno>Cyclicity</anno></c>
              is <c>cyclic</c> or <c>acyclic</c>, according to the
              options given to <c>new</c>.</p>
            <p_zh><c>{cyclicity, <anno>Cyclicity</anno>}</c>, 其中, 根据给<c>new</c>的选项, <c><anno>Cyclicity</anno></c> 是 <c>cyclic</c> 或 <c>acyclic</c>.</p_zh>
          </item>
          <item>
            <p><c>{memory, <anno>NoWords</anno>}</c>, where <c><anno>NoWords</anno></c> is
              the number of words allocated to the <c>ETS</c> tables.</p>
            <p_zh><c>{memory, <anno>NoWords</anno>}</c>, 其中 <c><anno>NoWords</anno></c> 是分配给该<c>ETS</c>表"字"的数量(内存大小).</p_zh>
          </item>
          <item>
            <p><c>{protection, <anno>Protection</anno>}</c>, where <c><anno>Protection</anno></c>
              is <c>protected</c> or <c>private</c>, according
              to the options given to <c>new</c>.</p>
            <p_zh><c>{protection, <anno>Protection</anno>}</c>, 其中, 根据给<c>new</c>的选项, <c><anno>Protection</anno></c>
              是 <c>protected</c> 或 <c>private</c>.</p_zh>
          </item>
        </list>
      </desc>
    </func>
    <func>
      <name name="new" arity="0"/>
      <fsummary>Return a protected empty digraph, where cycles  are allowed.</fsummary>
      <desc>
        <p>Equivalent to <c>new([])</c>.
          </p>
        <p_zh>等同于<c>new([])</c>.
          </p_zh>
      </desc>
    </func>
    <func>
      <name name="new" arity="1"/>
      <fsummary>Create a new empty digraph.</fsummary>
      <type variable="Type"/>
      <type name="d_type"/>
      <type name="d_cyclicity"/>
      <type name="d_protection"/>
      <desc>
        <p>Returns 
	  an <seealso marker="#empty_digraph">empty digraph</seealso> with 
	  properties according to the options in <c><anno>Type</anno></c>:</p>
        <p_zh>根据以下在<c><anno>Type</anno></c>中的选项返回一个具有相关特性的<seealso marker="#empty_digraph">空图</seealso>:</p_zh>
        <taglist>
          <tag><c>cyclic</c></tag>
          <item>Allow <seealso marker="#cycle">cycles</seealso> in the
           digraph (default).</item>
          <item_zh>在图中有<seealso marker="#cycle">环</seealso>(默认).</item_zh>
          <tag><c>acyclic</c></tag>
          <item>The digraph is to be kept <seealso marker="#acyclic_digraph">acyclic</seealso>.</item>
          <item_zh>图将会一直保持<seealso marker="#acyclic_digraph">无环</seealso>.</item_zh>
          <tag><c>protected</c></tag>
          <item>Other processes can read the digraph (default).</item>
          <item_zh>其他进程可以读取该图(默认).</item_zh>
          <tag><c>private</c></tag>
          <item>The digraph can be read and modified by the creating
           process only.</item>
          <item_zh>该图只能由创建它的进程读取和修改.</item_zh>
        </taglist>
        <p>If an unrecognized type option <c>T</c> is given or <c><anno>Type</anno></c>
	   is not a proper list, there will be a <c>badarg</c> exception.
          </p>
        <p_zh>如果给定一个不可识别的选项<c>T</c> 或者 <c><anno>Type</anno></c>不是一个[TODO]完全列表, 将会产生一个<c>badarg</c>异常.
          </p_zh>
      </desc>
    </func>
    <func>
      <name name="no_edges" arity="1"/>
      <fsummary>Return the number of edges of the a digraph.</fsummary>
      <desc>
        <p>Returns the number of edges of the digraph <c><anno>G</anno></c>.
          </p>
        <p_zh>返回图<c><anno>G</anno></c>中边的数量.  </p_zh>
      </desc>
    </func>
    <func>
      <name name="no_vertices" arity="1"/>
      <fsummary>Return the number of vertices of a digraph.</fsummary>
      <desc>
        <p>Returns the number of vertices of the digraph <c><anno>G</anno></c>.
          </p>
        <p_zh>返回图<c><anno>G</anno></c>中顶点的数量.  </p_zh>
      </desc>
    </func>
    <func>
      <name name="out_degree" arity="2"/>
      <fsummary>Return the out-degree of a vertex of a digraph.</fsummary>
      <desc>
        <p>Returns the <seealso marker="#out_degree">out-degree</seealso> of the vertex
          <c><anno>V</anno></c> of the digraph <c><anno>G</anno></c>.
          </p>
        <p_zh>返回图<c><anno>G</anno></c>中顶点<c><anno>V</anno></c>的<seealso marker="#out_degree">出度</seealso>.  </p_zh>
      </desc>
    </func>
    <func>
      <name name="out_edges" arity="2"/>
      <fsummary>Return all edges emanating from a vertex of  a digraph.</fsummary>
      <desc>
        <p>Returns a list of all 
	  edges <seealso marker="#emanate">emanating</seealso> from 
          <c><anno>V</anno></c> of the digraph <c><anno>G</anno></c>, in some unspecified order.
          </p>
        <p_zh>以列表的形式, 返回图<c><anno>G</anno></c>中从<c><anno>V</anno></c><seealso marker="#emanate">发出</seealso>的所有边.(列表元素顺序未指定).
          </p_zh>
      </desc>
    </func>
    <func>
      <name name="out_neighbours" arity="2"/>
      <fsummary>Return all out-neighbours of a vertex of  a digraph.</fsummary>
      <desc>
        <p>Returns a list of 
	  all  of 
	   of the digraph <c><anno>G</anno></c>, in some unspecified order.
          </p>
        <p_zh>以列表的形式, 返回图<c><anno>G</anno></c>中的<c><anno>V</anno></c>所有<seealso marker="#out_neighbour">外邻点</seealso>.(列表元素顺序未指定) </p_zh>
      </desc>
    </func>
    <func>
      <name name="vertex" arity="2"/>
      <fsummary>Return the label of a vertex of a digraph.</fsummary>
      <desc>
        <p>Returns <c>{<anno>V</anno>,&nbsp;<anno>Label</anno>}</c> where <c><anno>Label</anno></c> is the
          <seealso marker="#label">label</seealso> of the vertex
          <c><anno>V</anno></c> of the digraph <c><anno>G</anno></c>, or <c>false</c> if there
          is no vertex <c><anno>V</anno></c> of the digraph <c><anno>G</anno></c>.
          </p>
        <p_zh>返回<c>{<anno>V</anno>,&nbsp;<anno>Label</anno>}</c>,  其中 <c><anno>Label</anno></c>是图<c><anno>G</anno></c>中顶点<c><anno>V</anno></c>的<seealso marker="#label">标签</seealso>, 或者, 如果图<c><anno>G</anno></c>中没有顶点<c><anno>V</anno></c>则返回<c>false</c>.
          </p_zh>
      </desc>
    </func>
    <func>
      <name name="vertices" arity="1"/>
      <fsummary>Return all vertices of a digraph.</fsummary>
      <desc>
        <p>Returns a list of all vertices of the digraph <c><anno>G</anno></c>, in
          some unspecified order.
          </p>
        <p_zh>以列表的形式, 返回图<c><anno>G</anno></c>的所有顶点.(列表元素顺序未指定) </p_zh>
      </desc>
    </func>
  </funcs>

  <section>
    <title>See Also</title>
    <p><seealso marker="digraph_utils">digraph_utils(3)</seealso>, 
      <seealso marker="ets">ets(3)</seealso></p>
  </section>
</erlref>

