<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1996</year>
      <year>2011</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  The contents of this file are subject to the Erlang Public License,
  Version 1.1, (the "License"); you may not use this file except in
  compliance with the License. You should have received a copy of the
  Erlang Public License along with this software. If not, it can be
  retrieved online at http://www.erlang.org/.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
  the License for the specific language governing rights and limitations
  under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>pg</title>
    <prepared></prepared>
    <docno></docno>
    <date></date>
    <rev></rev>
  </header>
  <module>pg</module>
  <modulesummary>Distributed, Named Process Groups</modulesummary>
  <description>
    <p>This (experimental) module implements process groups. A process
      group is a group of processes that can be accessed by a common
      name. For example, a group named <c>foobar</c> can include a set
      of processes as members of this group and they can be located on
      different nodes.</p>
    <p_zh>这个实验性的模块实现了进程组. 进程组是一组可以通过一个公共名字访问的进程. 例如, 一个名字是<c>foobar</c>的组可以包含一些进程作为该组的成员并且它们可以位于不同的节点.</p_zh>
    <p>When messages are sent to the named group, all members of
      the group receive the message. The messages are serialized. If
      the process <c>P1</c> sends the message <c>M1</c> to the group,
      and process <c>P2</c> simultaneously sends message <c>M2</c>, then
      all members of the group receive the two messages in the same
      order. If members of a group terminate, they are automatically 
      removed from the group.</p>
    <p_zh>当把消息发送给命名组时, 组内所有成员都能收到该消息. 消息是序列化的. 
      如果进程<c>P1</c>向进程组发送消息<c>M1</c>, 同时进程<c>P2</c>发送消息<c>M2</c>, 那么所有进程组内成员会按同样的顺序接收到这两个消息. 如果组内成员被终止, 那么它们（被终止的进程）将会从进程组移除.</p_zh>
    <p>This module is not complete. The module is inspired by the ISIS
      system and the causal order protocol of the ISIS system should 
      also be implemented. At the moment, all messages are serialized
      by sending them through a group master process.</p>
    <p_zh>这个模块并未完成. 它的灵感源自ISIS系统and the causal order protocol of the ISIS system should 
      also be implemented. 目前, 所有的消息都是序列化的，并且通过进程组主进程发送.</p_zh>
  </description>
  <funcs>
    <func>
      <name name="create" arity="1"/>
      <fsummary>Create an empty group</fsummary>
      <desc>
        <p>Creates an empty group named <c><anno>PgName</anno></c> on the current
          node.</p>
        <p_zh>在当前节点创建一个名字是<c><anno>PgName</anno></c>的空进程组.</p_zh>
      </desc>
    </func>
    <func>
      <name name="create" arity="2"/>
      <fsummary>Create an empty group on another node</fsummary>
      <desc>
        <p>Creates an empty group named <c><anno>PgName</anno></c> on the node
          <c><anno>Node</anno></c>.</p>
        <p_zh>在节点<c><anno>Node</anno></c>上创建一个名字是<c><anno>PgName</anno></c>的空进程组.</p_zh>
      </desc>
    </func>
    <func>
      <name name="join" arity="2"/>
      <fsummary>Join a pid to a process group</fsummary>
      <desc>
        <p>Joins the pid <c><anno>Pid</anno></c> to the process group
          <c><anno>PgName</anno></c>.
          Returns a list of all old members of the group.</p>
        <p_zh>将进程号<c><anno>Pid</anno></c>加入到进程组<c><anno>PgName</anno></c>. 以一个列表的形式返回进程组所有旧成员.</p_zh>
      </desc>
    </func>
    <func>
      <name name="send" arity="2"/>
      <fsummary>Send a message to all members of a process group</fsummary>
      <desc>
        <p>Sends the tuple <c>{pg_message, From, PgName, Msg}</c> to
          all members of the process group <c><anno>PgName</anno></c>.</p>
        <p_zh>向进程组<c><anno>PgName</anno></c>中所有成员发送元组<c>{pg_message, From, PgName, Msg}</c>.</p_zh>
        <p>Failure: <c>{badarg, {<anno>PgName</anno>, <anno>Msg</anno>}}</c>
          if <c><anno>PgName</anno></c> is
          not a process group (a globally registered name).</p>
        <p_zh>失败: 如果<c><anno>PgName</anno></c> 不是一个进程组(一个全局已注册名), 返回<c>{badarg, {<anno>PgName</anno>, <anno>Msg</anno>}}</c>
          .</p_zh>
      </desc>
    </func>
    <func>
      <name name="esend" arity="2"/>
      <fsummary>Send a message to all members of a process group, except ourselves</fsummary>
      <desc>
        <p>Sends the tuple <c>{pg_message, From, PgName, Msg}</c> to
          all members of the process group <c><anno>PgName</anno></c>, except
          ourselves.</p>
        <p>Failure: <c>{badarg, {<anno>PgName</anno>, <anno>Msg</anno>}}</c>
          if <c><anno>PgName</anno></c> is
          not a process group (a globally registered name).</p>
        <p_zh>失败: 如果<c><anno>PgName</anno></c> 不是一个进程组(一个全局已注册名), 返回<c>{badarg, {<anno>PgName</anno>, <anno>Msg</anno>}}</c>
          .</p_zh>
      </desc>
    </func>
    <func>
      <name name="members" arity="1"/>
      <fsummary>Return a list of all members of a process group</fsummary>
      <desc>
        <p>Returns a list of all members of the process group
          <c>PgName</c>.</p>
        <p_zh>以一个列表的形式返回进程组<c>PgName</c>中所有的成员.</p_zh>
      </desc>
    </func>
  </funcs>
</erlref>

